// Code generated by protoc-gen-go. DO NOT EDIT.
// source: subscriber.proto

package peer // import "github.com/hyperledger/fabric/protos/peer"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SubscribeRequest struct {
	ChannelId            string   `protobuf:"bytes,1,opt,name=ChannelId,proto3" json:"ChannelId,omitempty"`
	OrdererEndPoint      string   `protobuf:"bytes,2,opt,name=OrdererEndPoint,proto3" json:"OrdererEndPoint,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeRequest) Reset()         { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()    {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_subscriber_399f112c50037a77, []int{0}
}
func (m *SubscribeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeRequest.Unmarshal(m, b)
}
func (m *SubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeRequest.Marshal(b, m, deterministic)
}
func (dst *SubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeRequest.Merge(dst, src)
}
func (m *SubscribeRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeRequest.Size(m)
}
func (m *SubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeRequest proto.InternalMessageInfo

func (m *SubscribeRequest) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *SubscribeRequest) GetOrdererEndPoint() string {
	if m != nil {
		return m.OrdererEndPoint
	}
	return ""
}

type SubscribeResponse struct {
	Msg                  string   `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeResponse) Reset()         { *m = SubscribeResponse{} }
func (m *SubscribeResponse) String() string { return proto.CompactTextString(m) }
func (*SubscribeResponse) ProtoMessage()    {}
func (*SubscribeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_subscriber_399f112c50037a77, []int{1}
}
func (m *SubscribeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeResponse.Unmarshal(m, b)
}
func (m *SubscribeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeResponse.Marshal(b, m, deterministic)
}
func (dst *SubscribeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeResponse.Merge(dst, src)
}
func (m *SubscribeResponse) XXX_Size() int {
	return xxx_messageInfo_SubscribeResponse.Size(m)
}
func (m *SubscribeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeResponse proto.InternalMessageInfo

func (m *SubscribeResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*SubscribeRequest)(nil), "protos.SubscribeRequest")
	proto.RegisterType((*SubscribeResponse)(nil), "protos.SubscribeResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SubscribeServiceClient is the client API for SubscribeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SubscribeServiceClient interface {
	NotifySubscriber(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error)
}

type subscribeServiceClient struct {
	cc *grpc.ClientConn
}

func NewSubscribeServiceClient(cc *grpc.ClientConn) SubscribeServiceClient {
	return &subscribeServiceClient{cc}
}

func (c *subscribeServiceClient) NotifySubscriber(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error) {
	out := new(SubscribeResponse)
	err := c.cc.Invoke(ctx, "/protos.SubscribeService/NotifySubscriber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubscribeServiceServer is the server API for SubscribeService service.
type SubscribeServiceServer interface {
	NotifySubscriber(context.Context, *SubscribeRequest) (*SubscribeResponse, error)
}

func RegisterSubscribeServiceServer(s *grpc.Server, srv SubscribeServiceServer) {
	s.RegisterService(&_SubscribeService_serviceDesc, srv)
}

func _SubscribeService_NotifySubscriber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscribeServiceServer).NotifySubscriber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.SubscribeService/NotifySubscriber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscribeServiceServer).NotifySubscriber(ctx, req.(*SubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SubscribeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.SubscribeService",
	HandlerType: (*SubscribeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NotifySubscriber",
			Handler:    _SubscribeService_NotifySubscriber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "subscriber.proto",
}

func init() { proto.RegisterFile("subscriber.proto", fileDescriptor_subscriber_399f112c50037a77) }

var fileDescriptor_subscriber_399f112c50037a77 = []byte{
	// 241 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0x41, 0x4b, 0x03, 0x31,
	0x10, 0x85, 0xa9, 0x82, 0xd0, 0x5c, 0x5c, 0x73, 0x5a, 0xc5, 0x83, 0x2c, 0x08, 0xf5, 0x92, 0x05,
	0xfd, 0x07, 0x15, 0x11, 0x2f, 0x5a, 0x5a, 0x4f, 0xf5, 0x94, 0x64, 0xa7, 0xd9, 0x60, 0x9b, 0x89,
	0x33, 0x59, 0xa1, 0xff, 0x5e, 0xda, 0x58, 0x5d, 0x96, 0x9e, 0x12, 0xde, 0x9b, 0xef, 0xcd, 0x63,
	0x44, 0xc1, 0x9d, 0x61, 0x4b, 0xde, 0x00, 0xa9, 0x48, 0x98, 0x50, 0x9e, 0xed, 0x1f, 0xae, 0x96,
	0xa2, 0x58, 0x1c, 0xbc, 0x39, 0x7c, 0x75, 0xc0, 0x49, 0x5e, 0x8b, 0xf1, 0x63, 0xab, 0x43, 0x80,
	0xf5, 0x4b, 0x53, 0x8e, 0x6e, 0x46, 0x93, 0xf1, 0xfc, 0x5f, 0x90, 0x13, 0x71, 0xfe, 0x46, 0x0d,
	0x10, 0xd0, 0x53, 0x68, 0x66, 0xe8, 0x43, 0x2a, 0x4f, 0xf6, 0x33, 0x43, 0xb9, 0xba, 0x15, 0x17,
	0xbd, 0x6c, 0x8e, 0x18, 0x18, 0x64, 0x21, 0x4e, 0x37, 0xec, 0x7e, 0x63, 0x77, 0xdf, 0xfb, 0x8f,
	0x5e, 0x85, 0x05, 0xd0, 0xb7, 0xb7, 0x20, 0x9f, 0x45, 0xf1, 0x8a, 0xc9, 0xaf, 0xb6, 0x7f, 0x0e,
	0xc9, 0x32, 0x57, 0x67, 0x35, 0x2c, 0x7c, 0x75, 0x79, 0xc4, 0xc9, 0xeb, 0xa6, 0x56, 0x54, 0x48,
	0x4e, 0xb5, 0xdb, 0x08, 0xb4, 0x86, 0xc6, 0x01, 0xa9, 0x95, 0x36, 0xe4, 0xed, 0x01, 0x89, 0x00,
	0x34, 0x95, 0xef, 0xa4, 0x03, 0x6b, 0x9b, 0x3c, 0x86, 0x99, 0xb6, 0x9f, 0xda, 0xc1, 0xf2, 0xce,
	0xf9, 0xd4, 0x76, 0x46, 0x59, 0xdc, 0xd4, 0x3d, 0xbc, 0xce, 0x78, 0x9d, 0xf1, 0x7a, 0x87, 0x9b,
	0x7c, 0xcc, 0x87, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0c, 0x02, 0x51, 0x73, 0x67, 0x01, 0x00,
	0x00,
}
