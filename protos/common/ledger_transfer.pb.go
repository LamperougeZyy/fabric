// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ledger_transfer.proto

package common

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Request struct {
	FileSuffix           string   `protobuf:"bytes,1,opt,name=FileSuffix,json=fileSuffix,proto3" json:"FileSuffix,omitempty"`
	ChannelId            string   `protobuf:"bytes,2,opt,name=ChannelId,json=channelId,proto3" json:"ChannelId,omitempty"`
	RequestList          []string `protobuf:"bytes,3,rep,name=RequestList,json=requestList,proto3" json:"RequestList,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_32cbea27f328db3a, []int{0}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetFileSuffix() string {
	if m != nil {
		return m.FileSuffix
	}
	return ""
}

func (m *Request) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *Request) GetRequestList() []string {
	if m != nil {
		return m.RequestList
	}
	return nil
}

type FileBlock struct {
	FileBlockId          string   `protobuf:"bytes,1,opt,name=FileBlockId,json=fileBlockId,proto3" json:"FileBlockId,omitempty"`
	Content              []byte   `protobuf:"bytes,2,opt,name=Content,json=content,proto3" json:"Content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileBlock) Reset()         { *m = FileBlock{} }
func (m *FileBlock) String() string { return proto.CompactTextString(m) }
func (*FileBlock) ProtoMessage()    {}
func (*FileBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_32cbea27f328db3a, []int{1}
}

func (m *FileBlock) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileBlock.Unmarshal(m, b)
}
func (m *FileBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileBlock.Marshal(b, m, deterministic)
}
func (m *FileBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileBlock.Merge(m, src)
}
func (m *FileBlock) XXX_Size() int {
	return xxx_messageInfo_FileBlock.Size(m)
}
func (m *FileBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_FileBlock.DiscardUnknown(m)
}

var xxx_messageInfo_FileBlock proto.InternalMessageInfo

func (m *FileBlock) GetFileBlockId() string {
	if m != nil {
		return m.FileBlockId
	}
	return ""
}

func (m *FileBlock) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type FileBlockPackage struct {
	FileBlock            []*FileBlock `protobuf:"bytes,1,rep,name=FileBlock,json=fileBlock,proto3" json:"FileBlock,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *FileBlockPackage) Reset()         { *m = FileBlockPackage{} }
func (m *FileBlockPackage) String() string { return proto.CompactTextString(m) }
func (*FileBlockPackage) ProtoMessage()    {}
func (*FileBlockPackage) Descriptor() ([]byte, []int) {
	return fileDescriptor_32cbea27f328db3a, []int{2}
}

func (m *FileBlockPackage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileBlockPackage.Unmarshal(m, b)
}
func (m *FileBlockPackage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileBlockPackage.Marshal(b, m, deterministic)
}
func (m *FileBlockPackage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileBlockPackage.Merge(m, src)
}
func (m *FileBlockPackage) XXX_Size() int {
	return xxx_messageInfo_FileBlockPackage.Size(m)
}
func (m *FileBlockPackage) XXX_DiscardUnknown() {
	xxx_messageInfo_FileBlockPackage.DiscardUnknown(m)
}

var xxx_messageInfo_FileBlockPackage proto.InternalMessageInfo

func (m *FileBlockPackage) GetFileBlock() []*FileBlock {
	if m != nil {
		return m.FileBlock
	}
	return nil
}

func init() {
	proto.RegisterType((*Request)(nil), "common.Request")
	proto.RegisterType((*FileBlock)(nil), "common.FileBlock")
	proto.RegisterType((*FileBlockPackage)(nil), "common.FileBlockPackage")
}

func init() { proto.RegisterFile("ledger_transfer.proto", fileDescriptor_32cbea27f328db3a) }

var fileDescriptor_32cbea27f328db3a = []byte{
	// 242 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0x4f, 0x4b, 0xc3, 0x40,
	0x10, 0xc5, 0x89, 0x81, 0x86, 0x9d, 0x15, 0xff, 0x0c, 0x08, 0x8b, 0x88, 0x84, 0x9c, 0x72, 0x8a,
	0x52, 0x6f, 0x1e, 0x0d, 0x28, 0x85, 0x1c, 0x64, 0xf5, 0x2e, 0x71, 0x33, 0x5b, 0x43, 0xd3, 0x5d,
	0xdd, 0x6c, 0xc1, 0x8f, 0x2f, 0x4d, 0xb7, 0xdb, 0x82, 0xc7, 0xf9, 0xcd, 0xcc, 0x7b, 0xbc, 0x07,
	0x57, 0x03, 0x75, 0x4b, 0x72, 0x1f, 0xde, 0xb5, 0x66, 0xd4, 0xe4, 0xaa, 0x6f, 0x67, 0xbd, 0xc5,
	0x99, 0xb2, 0xeb, 0xb5, 0x35, 0x45, 0x0f, 0x99, 0xa4, 0x9f, 0x0d, 0x8d, 0x1e, 0x6f, 0x01, 0x9e,
	0xfb, 0x81, 0xde, 0x36, 0x5a, 0xf7, 0xbf, 0x22, 0xc9, 0x93, 0x92, 0x49, 0xd0, 0x91, 0xe0, 0x0d,
	0xb0, 0xfa, 0xab, 0x35, 0x86, 0x86, 0x45, 0x27, 0x4e, 0xa6, 0x35, 0x53, 0x7b, 0x80, 0x39, 0xf0,
	0x20, 0xd4, 0xf4, 0xa3, 0x17, 0x69, 0x9e, 0x96, 0x4c, 0x72, 0x77, 0x40, 0xc5, 0x0b, 0xb0, 0xad,
	0xfe, 0xd3, 0x60, 0xd5, 0x6a, 0x7b, 0x1e, 0x87, 0x45, 0x17, 0xdc, 0xb8, 0x3e, 0x20, 0x14, 0x90,
	0xd5, 0xd6, 0x78, 0x32, 0x7e, 0x32, 0x3b, 0x95, 0x99, 0xda, 0x8d, 0x45, 0x0d, 0x17, 0xf1, 0xf7,
	0xb5, 0x55, 0xab, 0x76, 0x49, 0x78, 0x77, 0x24, 0x2e, 0x92, 0x3c, 0x2d, 0xf9, 0xfc, 0xb2, 0xda,
	0x65, 0xac, 0xe2, 0x42, 0xb2, 0x68, 0x30, 0x6f, 0xe0, 0xac, 0x99, 0x9a, 0x79, 0x0f, 0xc5, 0xe0,
	0x23, 0xf0, 0x23, 0x82, 0xe7, 0xfb, 0xf7, 0x10, 0xeb, 0x5a, 0xfc, 0xd3, 0x0b, 0xe6, 0xf7, 0xc9,
	0xe7, 0x6c, 0x6a, 0xf5, 0xe1, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x08, 0xac, 0x3f, 0x2b, 0x6e, 0x01,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LedgerTransferClient is the client API for LedgerTransfer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LedgerTransferClient interface {
	LedgerTrans(ctx context.Context, in *Request, opts ...grpc.CallOption) (LedgerTransfer_LedgerTransClient, error)
}

type ledgerTransferClient struct {
	cc grpc.ClientConnInterface
}

func NewLedgerTransferClient(cc grpc.ClientConnInterface) LedgerTransferClient {
	return &ledgerTransferClient{cc}
}

func (c *ledgerTransferClient) LedgerTrans(ctx context.Context, in *Request, opts ...grpc.CallOption) (LedgerTransfer_LedgerTransClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LedgerTransfer_serviceDesc.Streams[0], "/common.LedgerTransfer/LedgerTrans", opts...)
	if err != nil {
		return nil, err
	}
	x := &ledgerTransferLedgerTransClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LedgerTransfer_LedgerTransClient interface {
	Recv() (*FileBlockPackage, error)
	grpc.ClientStream
}

type ledgerTransferLedgerTransClient struct {
	grpc.ClientStream
}

func (x *ledgerTransferLedgerTransClient) Recv() (*FileBlockPackage, error) {
	m := new(FileBlockPackage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LedgerTransferServer is the server API for LedgerTransfer service.
type LedgerTransferServer interface {
	LedgerTrans(*Request, LedgerTransfer_LedgerTransServer) error
}

// UnimplementedLedgerTransferServer can be embedded to have forward compatible implementations.
type UnimplementedLedgerTransferServer struct {
}

func (*UnimplementedLedgerTransferServer) LedgerTrans(req *Request, srv LedgerTransfer_LedgerTransServer) error {
	return status.Errorf(codes.Unimplemented, "method LedgerTrans not implemented")
}

func RegisterLedgerTransferServer(s *grpc.Server, srv LedgerTransferServer) {
	s.RegisterService(&_LedgerTransfer_serviceDesc, srv)
}

func _LedgerTransfer_LedgerTrans_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LedgerTransferServer).LedgerTrans(m, &ledgerTransferLedgerTransServer{stream})
}

type LedgerTransfer_LedgerTransServer interface {
	Send(*FileBlockPackage) error
	grpc.ServerStream
}

type ledgerTransferLedgerTransServer struct {
	grpc.ServerStream
}

func (x *ledgerTransferLedgerTransServer) Send(m *FileBlockPackage) error {
	return x.ServerStream.SendMsg(m)
}

var _LedgerTransfer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "common.LedgerTransfer",
	HandlerType: (*LedgerTransferServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LedgerTrans",
			Handler:       _LedgerTransfer_LedgerTrans_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ledger_transfer.proto",
}
